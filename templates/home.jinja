<!-- 
    Here you'll find the main exhibit: the chat application code. Feel free to look around!
-->
{% extends 'base.jinja' %}


{% block content %} 
   <style>
    nav {
        border-bottom: 1px solid black;
        overflow: auto
    }

    #message_box {
        border: 1px solid black; 
        height: 400px; 
        width: 800px; 
        overflow: auto;
        padding: 2px;
    }

    .text  {
        margin-top: 2px;
        margin-bottom: 2px;
    }

    /* Custom confirmation dialog styles */
    #confirmation-dialog {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: #ffffff;
        border: 1px solid #000000;
        padding: 20px;
        display: none; /* Hide by default */
    }

    #accept-button, #reject-button {
        margin-top: 10px;
    }
</style>

<!--Navbar, you'll see the username here-->
<nav style="border-bottom: 1px solid black;">
    <ol style="float: right">
        <li style="display: block;">
            <a href="/profile/{{ username }}">Username: {{ username }}</a>
        </li>
    </ol>
</nav>


<h1>Messaging App </h1>
<section id="friends" style="position: absolute; left: 1200px">
    <p class="text">Friends List</p>
    <div id="friendsList">
        <!-- Friends will be listed here -->
    </div>
</section>



<main>
    <!-- The messages are displayed here -->
    <section id="message_box"></section>

    <!-- These part ideally should be a form element, 
    but I wrote this code a year ago and I don't want to break anything...-->
    <section id="chat_box">
        <p class="text">Chat with: </p>
        <input id="receiver" placeholder="username">
        <!-- MDN says its bad practice to use the onclick attribute,
        but we're using it anyways coz its easy :)-->
        <button onclick="join_room()">Chat</button>
        
    </section>

    <!-- Custom confirmation dialog for friend requests -->
    <div id="confirmation-dialog">
        <p id="confirmation-text"></p>
        <button id="accept-button">Accept</button>
        <button id="reject-button">Reject</button>
    </div>
    <!-- The (message) input box is set to display: none initially, 
    this means the input box is "invisible" initially-->
    <section id="input_box" style="display: none" >
        <p class="text">Message: </p>
        <input id="message" placeholder="message">
        <button onclick="send()">Send</button>
        <button onclick="leave()">Leave Room</button>
        <button onclick="sendFriendRequest()">Send Friend Request</button>
    </section>

    
</main>

<script src="/static/js/libs/socket.io.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.0.0/crypto-js.min.js"></script>

<script>
    let room_id = 0;
    // Function to send a friend request to the receiver
    function sendFriendRequest() {
        let receiver = $("#receiver").val();

        // Emit a "friend_request" event to the server
        socket.emit("friend_request", username, receiver, (res) => {
            if (res === "success") {
                alert("Friend request sent successfully!");
            } else {
                alert(res); // Display error message if any
            }
        });
    }
    
    
    // when the user presses the "Enter" key inside of the "message box", 
    // the message is sent to the server
    $("#message").on("keyup", (e) => {
        if (e.key == "Enter") {
            send();
        }
    })

    // when the user presses the enter key inside of the "receiver box"
    // the user joins a (socket) room
     $("#receiver").on("keyup", (e) => {
        if (e.key == "Enter") {
            join_room();
        }
    })

    $(document).ready(() => {
        
        // room_id is undefined if the user hasn't joined a room
        // we early return in this case
        if (Cookies.get("room_id") == undefined) {
            return;
        }

        // the user has already joined an existing room
        // we'll display the message box, instead of the "Chat with: " box
        $("#chat_box").hide();
        $("#input_box").show();
        room_id = parseInt(Cookies.get("room_id"));
        // Fetch the HMAC key from the server and store it in sessionStorage
        fetch('/api/get_hmac_key')
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    throw new Error('Failed to fetch HMAC key');
                }
            })
            .then(data => {
                if (data.hmac_key) {
                    sessionStorage.setItem('hmac_key', data.hmac_key);
                    console.log("HMAC Key fetched and stored successfully.");
                } else {
                    console.error("HMAC Key not found in the response");
                }
            })
            .catch(error => {
                console.error("Error fetching HMAC key:", error);
            });
        
        })
    
    // Here's the Socket IO part of the code
    // things get a bit complicated here so brace yourselves :P
    let username = "{{ username }}";

    Cookies.set('username', username);

    // initializes the socket
    const socket = io();

    // an incoming message arrives, we'll add the message to the message box
    /*
    socket.on("incoming", (msg, color="black") => {
        const parsedMessage = parseMessage(msg);
        if (isNotSender(msg)) {
            if (parsedMessage.isEncrypted) {
                getPrivateKey().then(privateKey => {
                    decryptMessage(parsedMessage.content, privateKey).then(decryptedMsg => {
                        add_message(`${parsedMessage.username}: ${decryptedMsg}`, color);
                    }).catch(err => {
                        console.error("Decryption error:", err);
                    });
                });
            } else {
                // If it's not encrypted, just display the message
                add_message(parsedMessage.content, color);
            };
        }else{
            
        };
    });
    */
    socket.on("incoming", (msg, color="black") => {
        const parsedMessage = parseMessage(msg);
        if (isNotSender(msg)) {
            
            const key = sessionStorage.getItem('hmac_key');  // Ensure this is stored securely
            if (parsedMessage.isEncrypted) {
                
                getPrivateKey().then(privateKey => {
                decryptMessage(parsedMessage.content, privateKey).then(decryptedMsg => {
                    // After decryption, check HMAC
                    const key = sessionStorage.getItem('hmac_key');  // Ensure this is stored securely
                    console.log("decryptedMsg: ",decryptedMsg,"\nhmac: ",parsedMessage.hmac)
                    if (verifyHMAC(parsedMessage.content + "||" + parsedMessage.hmac, key)) {
                        add_message(`${parsedMessage.username}: ${decryptedMsg}`, color);
                        
                    } else {
                        console.error("HMAC verification failed. Message integrity could be compromised.");
                    }
                }).catch(err => {
                    console.error("Decryption error:", err);
                });
            });
            } else {
                // If it's not encrypted, just display the message
                console.log("not encrypted, here's the message: ",parsedMessage.content)
                add_message(parsedMessage.content, color);
            }
        } else {
            //message is sent by the sender its self
        }
        
    });

    // we'll send the message to the server by emitting a "send" event
    /*
    function send() {
        const message = $("#message").val();
        $("#message").val("");
        add_message(username +": " + message, "black")       
        getPublicKey($("#receiver").val()).then(publicKey => {
            encryptMessage(message, publicKey).then(encryptedMsg => {
                socket.emit("send", username, encryptedMsg, room_id);
            });
        });

    } 
    */
    function send() {
        const message = $("#message").val();
        $("#message").val("");
        add_message(username + ": " + message, "black");

        // Retrieve the receiver's public key for encryption
        getPublicKey($("#receiver").val()).then(publicKey => {
            if (!publicKey) {
                console.error("Public key is null");
                return; // Exit the function if publicKey is null
            }

            // Encrypt the message
            encryptMessage(message, publicKey).then(encryptedMsg => {
                // Retrieve the HMAC key stored securely
                const key = sessionStorage.getItem('hmac_key');

                // Generate HMAC for the encrypted message
                let hmac = CryptoJS.HmacSHA256(encryptedMsg, key).toString();
                let messageWithHmac = encryptedMsg + "||" + hmac;

                // Send the encrypted message with HMAC appended
                socket.emit("send", username, messageWithHmac, room_id);
                console.log("Encrypting message: ",encryptedMsg,"\nhmac: ",hmac)
            }).catch(error => {
                console.error("Encryption error:", error);
            });
        }).catch(error => {
            console.error("Error retrieving public key:", error);
        });
    }



    // we emit a join room event to the server to join a room
    function join_room() {
       
        let receiver = $("#receiver").val();

        // pass in the receiver of our message to the server
        // as well as the current user's username
        socket.emit("join", username, receiver, (res) => {
            // res is a string with the error message if the error occurs
            // this is a pretty bad way of doing error handling, but watevs
            if (typeof res != "number") {
                alert(res);
                return;
            }

            // set the room id variable to the room id returned by the server
            room_id = res;
            Cookies.set("room_id", room_id);

            // now we'll show the input box, so the user can input their message
            $("#chat_box").hide();
            $("#input_box").show();
        });
     
    }

    // function when the user clicks on "Leave Room"
    // emits a "leave" event, telling the server that we want to leave the room
    function leave() {
        Cookies.remove("room_id");
        socket.emit("leave", username, room_id);
        $("#input_box").hide();
        $("#chat_box").show();
    }


    // function to add a message to the message box
    // called when an incoming message has reached a client
    function add_message(message, color) {
        console.log('Display message: ',message)
        let box = $("#message_box");
        let child = $(`<p style="color:${color}; margin: 0px;"></p>`).text(message);
        box.append(child);
    }
    


   // Listen for friend requests from the server
    socket.on("friend_request", (sender) => {
        // Display a confirmation dialog for the recipient
        let response = confirm(sender + " wants to add you as a friend. Do you accept?");
        if (response) {
            // If the recipient accepts, emit an "accept_friend_request" event to the server
            socket.emit("accept_friend_request", username, sender);
        }
    });

    // Listen for friend request acceptance from the server
    socket.on("friend_request_accepted", (receiver) => {
        alert(receiver + " accepted your friend request!");
        // You can perform additional actions if needed
    });
    

    // Listen for friend list from the server
    socket.on("friend_list", (friends) => {
        // Clear the existing friend list
        $("#friendsList").empty();
        
        // Iterate through the friends list and add them to the UI as buttons
        friends.forEach((friend) => {
            // Create a button element for each friend
            let button = $("<button>").text(friend);
            button.addClass("friendButton");
            // Add click event listener to the button
            button.click(() => {
                // Emit a "join" event to the server to open a chat with the friend
                socket.emit("join", username, friend, (res) => {
                    if (typeof res != "number") {
                        alert(res);
                        return;
                    }
                    // set the room id variable to the room id returned by the server
                    room_id = res;
                    Cookies.set("room_id", room_id);
                    // Show the input box for chatting
                    $("#chat_box").hide();
                    $("#input_box").show();
                });
            });
            // Append the button to the friends list
            $("#friendsList").append(button);
        });
    });

    function encryptMessage(message, publicKey) {
        const enc = new TextEncoder();
        const encodedMessage = enc.encode(message);
        return importPublicKey(publicKey).then(publicKeyObj => {
            return window.crypto.subtle.encrypt({ name: "RSA-OAEP" }, publicKeyObj, encodedMessage);
        }).then(encrypted => {
            return window.btoa(String.fromCharCode.apply(null, new Uint8Array(encrypted)));
        });
    }

    function decryptMessage(encrypted, privateKey) {
        const dec = new TextDecoder("utf-8");
        let encryptedBuffer;
        try {
            encryptedBuffer = Uint8Array.from(atob(encrypted), c => c.charCodeAt(0));
        } catch (error) {
            console.error("Error decoding base64:", error);
            throw new Error("Decoding error: Invalid Base64 string");
        }

        return window.crypto.subtle.decrypt({ name: "RSA-OAEP" }, privateKey, encryptedBuffer)
        .then(decrypted => {
            const result = dec.decode(decrypted);
            return result;
        }).catch(error => {
            console.error("Decryption failed:", error);
            throw new Error("Decryption failure: " + error.message);
        });
    }


    function importPublicKey(pem) {
        const binaryDer = _base64ToArrayBuffer(pem);
        return window.crypto.subtle.importKey("spki", binaryDer, { name: "RSA-OAEP", hash: "SHA-256" }, true, ["encrypt"]);
    }

    // Retrieve the private key from IndexedDB
    async function getPrivateKey() {
        const db = await openIndexedDB();
        return new Promise((resolve, reject) => {
            const transaction = db.transaction(["keys"], "readonly");
            const store = transaction.objectStore("keys");
            const request = store.get("privateKey");

            request.onsuccess = async () => {
                if (request.result) {
                    try {
                        // Assume request.result.key contains the JWK
                        const cryptoKey = await importPrivateKey(request.result.key);
                        resolve(cryptoKey);  // Now returning a CryptoKey object ready for use
                    } catch (error) {
                        console.error("Error importing key:", error);
                        reject("Error importing key: " + error);
                    }
                } else {
                    console.error("No private key found in IndexedDB");
                    reject("No private key found");
                }
            };
            request.onerror = function(event) {
                console.error("Failed to retrieve the private key from DB:", event);
                reject("Failed to retrieve the private key from DB");
            };
        });
    }



    // Fetch public key of a user from the server
    async function getPublicKey(username) {
        try {
            const response = await fetch(`/api/get_public_key/${username}`);
            if (!response.ok) {
                throw new Error('Failed to fetch public key');
            }
            const data = await response.json();
            return data.publicKey;  // Adjust according to how the public key is sent by the server
        } catch (error) {
            console.error('Error fetching public key:', error);
            alert('Could not retrieve public key for user: ' + username);
        }
    }

    // Utility function to convert Base64 to ArrayBuffer
    function _base64ToArrayBuffer(base64) {
        const binary_string = window.atob(base64);
        const len = binary_string.length;
        const bytes = new Uint8Array(len);
        for (let i = 0; i < len; i++) {
            bytes[i] = binary_string.charCodeAt(i);
        }
        return bytes.buffer;
    }
    
    function openIndexedDB() {
        return new Promise((resolve, reject) => {
            // Open a database named "cryptoKeys"
            const request = window.indexedDB.open("cryptoKeys", 1);

            request.onerror = function(event) {
                console.error("Database error: " + event.target.errorCode);
                reject(event.target.error);
            };

            request.onsuccess = function(event) {
                console.log("Database opened successfully");
                resolve(event.target.result);
            };

            // Handle database upgrades when needed:
            request.onupgradeneeded = function(event) {
                const db = event.target.result;

                // Create an object store called "keys" if it doesn't already exist
                if (!db.objectStoreNames.contains("keys")) {
                    db.createObjectStore("keys", { keyPath: "id" });
                }
            };
        });
    }

    function isBase64(str) {
        const base64Regex = /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/;
        return base64Regex.test(str);
    }

/*
    function parseMessage(message) {
        const messageParts = message.split(": ");
        if (messageParts.length > 1 && isBase64(messageParts[1])) {
            return {
                username: messageParts[0],
                content: messageParts[1],
                isEncrypted: true
            };
        } else {
            return {
                content: message,
                isEncrypted: false
            };
        }
    }
*/
    function parseMessage(message) {
    // Split the message into potential username and the rest
        const delimiterIndex = message.lastIndexOf("||");
        const hmac = message.substring(delimiterIndex + 2);
        const messageWithContent = message.substring(0, delimiterIndex);
        
        const messageParts = messageWithContent.split(": ");
        if (messageParts.length > 1 && isBase64(messageParts[1])) {
            const username = messageParts[0];
            const content = messageParts[1];

            return {
                username: username,
                content: content,
                hmac: hmac,
                isEncrypted: true
            };
        } else {
            // If there's no username part, assume entire message is content
            return {
                content: message,
                hmac: hmac,
                isEncrypted: false
            };
        }
    }



    function importPrivateKey(privateKeyJwk) {
        return window.crypto.subtle.importKey(
            "jwk",
            privateKeyJwk,
            {
                name: "RSA-OAEP",
                hash: {name: "SHA-256"}
            },
            true,
            ["decrypt"]
        );
    }


    function isNotSender(message) {
        const messageParts = message.split(": ");
        if (messageParts.length > 1 ) {
            checkName = messageParts[0]
            if (checkName == username){
                return false;
            } else {
                return true;
            };
        } else {
            return true;
        };
    };
    function verifyHMAC(message, key) {
        let parts = message.split('||');
        let originalMessage = parts[0];
        let receivedHmac = parts[1];

        let hmac = CryptoJS.HmacSHA256(originalMessage, key).toString();

        return hmac === receivedHmac;
    }



</script>
{% endblock %}
